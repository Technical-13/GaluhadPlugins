------------------------------------------------------------------------------
-- UTF-8 Strings.
-- This single file is completely free. Please use/modify without credits. Ooz
------------------------------------------------------------------------------

-- UTF 8 Stings. Names based on HTML Entities
UTF8_iexcl = string.char(194)..string.char(161); -- ¡	
UTF8_cent = string.char(194)..string.char(162); -- ¢	
UTF8_pound = string.char(194)..string.char(163); -- £	
UTF8_curren = string.char(194)..string.char(164); -- ¤	
UTF8_yen = string.char(194)..string.char(165); -- ¥	
UTF8_brvbar = string.char(194)..string.char(166); -- ¦	
UTF8_sect = string.char(194)..string.char(167); -- §	
UTF8_uml = string.char(194)..string.char(168); -- ¨	
UTF8_copy = string.char(194)..string.char(169); -- ©	
UTF8_ordf = string.char(194)..string.char(170); -- ª	
UTF8_laquo = string.char(194)..string.char(171); -- «	
UTF8_not = string.char(194)..string.char(172); -- ¬	
UTF8_shy = string.char(194)..string.char(173); -- ­	
UTF8_reg = string.char(194)..string.char(174); -- ®	
UTF8_macr = string.char(194)..string.char(175); -- ¯	
UTF8_deg = string.char(194)..string.char(176); -- °	
UTF8_plusmn = string.char(194)..string.char(177); -- ±	
UTF8_sup2 = string.char(194)..string.char(178); -- ²	
UTF8_sup3 = string.char(194)..string.char(179); -- ³	
UTF8_acute = string.char(194)..string.char(180); -- ´	
UTF8_micro = string.char(194)..string.char(181); -- µ	
UTF8_para = string.char(194)..string.char(182); -- ¶	
UTF8_middot = string.char(194)..string.char(183); -- ·	
UTF8_cedil = string.char(194)..string.char(184); -- ¸	
UTF8_sup1 = string.char(194)..string.char(185); -- ¹	
UTF8_ordm = string.char(194)..string.char(186); -- º	
UTF8_raquo = string.char(194)..string.char(187); -- »	
UTF8_frac14 = string.char(194)..string.char(188); -- ¼	
UTF8_frac12 = string.char(194)..string.char(189); -- ½	
UTF8_frac34 = string.char(194)..string.char(190); -- ¾	
UTF8_iquest = string.char(194)..string.char(191); -- ¿	
UTF8_Agrave = string.char(195)..string.char(128); -- À	
UTF8_Aacute = string.char(195)..string.char(129); -- Á	
UTF8_Acirc = string.char(195)..string.char(130); -- Â	
UTF8_Atilde = string.char(195)..string.char(131); -- Ã	
UTF8_Auml = string.char(195)..string.char(132); -- Ä	
UTF8_Aring = string.char(195)..string.char(133); -- Å	
UTF8_AElig = string.char(195)..string.char(134); -- Æ	
UTF8_Ccedil = string.char(195)..string.char(135); -- Ç	
UTF8_Egrave = string.char(195)..string.char(136); -- È	
UTF8_Eacute = string.char(195)..string.char(137); -- É	
UTF8_Ecirc = string.char(195)..string.char(138); -- Ê	
UTF8_Euml = string.char(195)..string.char(139); -- Ë	
UTF8_Igrave = string.char(195)..string.char(140); -- Ì	
UTF8_Iacute = string.char(195)..string.char(141); -- Í	
UTF8_Icirc = string.char(195)..string.char(142); -- Î	
UTF8_Iuml = string.char(195)..string.char(143); -- Ï	
UTF8_ETH = string.char(195)..string.char(144); -- Ð	
UTF8_Ntilde = string.char(195)..string.char(145); -- Ñ	
UTF8_Ograve = string.char(195)..string.char(146); -- Ò	
UTF8_Oacute = string.char(195)..string.char(147); -- Ó	
UTF8_Ocirc = string.char(195)..string.char(148); -- Ô	
UTF8_Otilde = string.char(195)..string.char(149); -- Õ	
UTF8_Ouml = string.char(195)..string.char(150); -- Ö	
UTF8_times = string.char(195)..string.char(151); -- ×	
UTF8_Oslash = string.char(195)..string.char(152); -- Ø	
UTF8_Ugrave = string.char(195)..string.char(153); -- Ù	
UTF8_Uacute = string.char(195)..string.char(154); -- Ú	
UTF8_Ucirc = string.char(195)..string.char(155); -- Û	
UTF8_Uuml = string.char(195)..string.char(156); -- Ü	
UTF8_Yacute = string.char(195)..string.char(157); -- Ý	
UTF8_THORN = string.char(195)..string.char(158); -- Þ	
UTF8_szlig = string.char(195)..string.char(159); -- ß	
UTF8_agrave = string.char(195)..string.char(160); -- à	
UTF8_aacute = string.char(195)..string.char(161); -- á	
UTF8_acirc = string.char(195)..string.char(162); -- â	
UTF8_atilde = string.char(195)..string.char(163); -- ã	
UTF8_auml = string.char(195)..string.char(164); -- ä	
UTF8_aring = string.char(195)..string.char(165); -- å	
UTF8_aelig = string.char(195)..string.char(166); -- æ	
UTF8_ccedil = string.char(195)..string.char(167); -- ç	
UTF8_egrave = string.char(195)..string.char(168); -- è	
UTF8_eacute = string.char(195)..string.char(169); -- é	
UTF8_ecirc = string.char(195)..string.char(170); -- ê	
UTF8_euml = string.char(195)..string.char(171); -- ë	
UTF8_igrave = string.char(195)..string.char(172); -- ì	
UTF8_iacute = string.char(195)..string.char(173); -- í	
UTF8_icirc = string.char(195)..string.char(174); -- î	
UTF8_iuml = string.char(195)..string.char(175); -- ï	
UTF8_eth = string.char(195)..string.char(176); -- ð	
UTF8_ntilde = string.char(195)..string.char(177); -- ñ	
UTF8_ograve = string.char(195)..string.char(178); -- ò	
UTF8_oacute = string.char(195)..string.char(179); -- ó	
UTF8_ocirc = string.char(195)..string.char(180); -- ô	
UTF8_otilde = string.char(195)..string.char(181); -- õ	
UTF8_ouml = string.char(195)..string.char(182); -- ö	
UTF8_divide = string.char(195)..string.char(183); -- ÷	
UTF8_oslash = string.char(195)..string.char(184); -- ø	
UTF8_ugrave = string.char(195)..string.char(185); -- ù	
UTF8_uacute = string.char(195)..string.char(186); -- ú	
UTF8_ucirc = string.char(195)..string.char(187); -- û	
UTF8_uuml = string.char(195)..string.char(188); -- ü	
UTF8_yacute = string.char(195)..string.char(189); -- ý	
UTF8_thorn = string.char(195)..string.char(190); -- þ	
UTF8_yuml = string.char(195)..string.char(191); -- ÿ	

-- encoded character to UTF-8
UTF8_encodingMap = {
	 {"¡",UTF8_iexcl}
	,{"¢",UTF8_cent}
	,{"£",UTF8_pound}
	,{"¤",UTF8_curren}
	,{"¥",UTF8_yen}
	,{"¦",UTF8_brvbar}
	,{"§",UTF8_sect}
	,{"¨",UTF8_uml}
	,{"©",UTF8_copy}
	,{"ª",UTF8_ordf}
	,{"«",UTF8_laquo}
	,{"¬",UTF8_not}
	,{"­",UTF8_shy}
	,{"®",UTF8_reg}
	,{"¯",UTF8_macr}
	,{"°",UTF8_deg}
	,{"±",UTF8_plusmn}
	,{"); -- ²",UTF8_sup2}
	,{"³",UTF8_sup3}
	,{"´",UTF8_acute}
	,{"µ",UTF8_micro}
	,{"¶",UTF8_para}
	,{"·",UTF8_middot}
	,{"¸",UTF8_cedil}
	,{"¹",UTF8_sup1}
	,{"º",UTF8_ordm}
	,{"»",UTF8_raquo}
	,{"¼",UTF8_frac14}
	,{"½",UTF8_frac12}
	,{"¾",UTF8_frac34}
	,{"¿",UTF8_iquest}
	,{"À",UTF8_Agrave}
	,{"Á",UTF8_Aacute}
	,{"Â",UTF8_Acirc}
	,{"Ã",UTF8_Atilde}
	,{"Ä",UTF8_Auml}
	,{"Å",UTF8_Aring}
	,{"Æ",UTF8_AElig}
	,{"Ç",UTF8_Ccedil}
	,{"È",UTF8_Egrave}
	,{"É",UTF8_Eacute}
	,{"Ê",UTF8_Ecirc}
	,{"Ë",UTF8_Euml}
	,{"Ì",UTF8_Igrave}
	,{"Í",UTF8_Iacute}
	,{"Î",UTF8_Icirc}
	,{"Ï",UTF8_Iuml}
	,{"Ð",UTF8_ETH}
	,{"Ñ",UTF8_Ntilde}
	,{"Ò",UTF8_Ograve}
	,{"Ó",UTF8_Oacute}
	,{"Ô",UTF8_Ocirc}
	,{"Õ",UTF8_Otilde}
	,{"Ö",UTF8_Ouml}
	,{"×",UTF8_times}
	,{"Ø",UTF8_Oslash}
	,{"Ù",UTF8_Ugrave}
	,{"Ú",UTF8_Uacute}
	,{"Û",UTF8_Ucirc}
	,{"Ü",UTF8_Uuml}
	,{"Ý",UTF8_Yacute}
	,{"Þ",UTF8_THORN}
	,{"ß",UTF8_szlig}
	,{"à",UTF8_agrave}
	,{"á",UTF8_aacute}
	,{"â",UTF8_acirc}
	,{"ã",UTF8_atilde}
	,{"ä",UTF8_auml}
	,{"å",UTF8_aring}
	,{"æ",UTF8_aelig}
	,{"ç",UTF8_ccedil}
	,{"è",UTF8_egrave}
	,{"é",UTF8_eacute}
	,{"ê",UTF8_ecirc}
	,{"ë",UTF8_euml}
	,{"ì",UTF8_igrave}
	,{"í",UTF8_iacute}
	,{"î",UTF8_icirc}
	,{"ï",UTF8_iuml}
	,{"ð",UTF8_eth}
	,{"ñ",UTF8_ntilde}
	,{"ò",UTF8_ograve}
	,{"ó",UTF8_oacute}
	,{"ô",UTF8_ocirc}
	,{"õ",UTF8_otilde}
	,{"ö",UTF8_ouml}
	,{"÷",UTF8_divide}
	,{"ø",UTF8_oslash}
	,{"ù",UTF8_ugrave}
	,{"ú",UTF8_uacute}
	,{"û",UTF8_ucirc}
	,{"ü",UTF8_uuml}
	,{"ý",UTF8_yacute}
	,{"þ",UTF8_thorn}
	,{"ÿ",UTF8_yuml}
};

function ToUTF8(encodedString)
	local utf8result = "";
	for c in string.gmatch(encodedString, ".") do 
		local isUnmapped = true;
		for i,v in ipairs(UTF8_encodingMap) do
			if c==v[1] then
				utf8result=utf8result..v[2];
				isUnmapped = false;
				break;
			end
		end
		if isUnmapped then
			utf8result=utf8result..c;
		end
	end
	return utf8result;
end

function FromUTF8(utf8String)
	local encodedresult = "";
	local sequence = false;
	local sequencePrefix = "";
	for c in string.gmatch(utf8String, ".") do 
		b = string.byte(c);
		if sequence then
			for i,v in ipairs(UTF8_encodingMap) do
				if sequencePrefix..c == v[2] then
					encodedresult = encodedresult..v[1];
					break;
				end
			end
			sequence = false;
			sequencePrefix = "";
		elseif b == 154 or b == 195 then
			sequence = true;
			sequencePrefix = c;
		else
			encodedresult = encodedresult..c;
		end
	end
	return encodedresult;
end
